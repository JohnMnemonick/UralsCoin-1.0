# Makefile.in generated by automake 1.15 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/urals
pkgincludedir = $(includedir)/urals
pkglibdir = $(libdir)/urals
pkglibexecdir = $(libexecdir)/urals
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
am__append_1 =  \
	-I$(top_srcdir)/src/leveldb/include \
	-I$(top_srcdir)/src/leveldb/helpers/memenv
am__append_2 = $(top_builddir)/src/leveldb/libleveldb.a
am__append_3 = $(top_builddir)/src/leveldb/libmemenv.a
am__append_4 = liburals_wallet.a
bin_PROGRAMS = $(am__EXEEXT_1) $(am__EXEEXT_2)
am__append_5 = uralsd
am__append_6 = urals-cli
#am__append_7 = compat/glibc_compat.cpp \
#	compat/glibcxx_compat.cpp
am__append_8 = liburals_wallet.a
#
#am__append_9 = uralsd-res.rc
#
#am__append_10 = urals-cli-res.rc
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/src/m4/ax_boost_base.m4 \
	$(top_srcdir)/src/m4/ax_boost_chrono.m4 \
	$(top_srcdir)/src/m4/ax_boost_filesystem.m4 \
	$(top_srcdir)/src/m4/ax_boost_program_options.m4 \
	$(top_srcdir)/src/m4/ax_boost_system.m4 \
	$(top_srcdir)/src/m4/ax_boost_thread.m4 \
	$(top_srcdir)/src/m4/ax_boost_unit_test_framework.m4 \
	$(top_srcdir)/src/m4/ax_check_compile_flag.m4 \
	$(top_srcdir)/src/m4/ax_check_link_flag.m4 \
	$(top_srcdir)/src/m4/ax_check_preproc_flag.m4 \
	$(top_srcdir)/src/m4/ax_pthread.m4 \
	$(top_srcdir)/src/m4/bitcoin_find_bdb48.m4 \
	$(top_srcdir)/src/m4/bitcoin_qt.m4 \
	$(top_srcdir)/src/m4/bitcoin_subdir_to_include.m4 \
	$(top_srcdir)/pkg.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = urals-config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
AM_V_AR = $(am__v_AR_$(V))
am__v_AR_ = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
am__v_AR_0 = @echo "  AR      " $@;
am__v_AR_1 = 
liburals_cli_a_AR = $(AR) $(ARFLAGS)
liburals_cli_a_LIBADD =
am__objects_1 =
am_liburals_cli_a_OBJECTS = rpcclient.$(OBJEXT) $(am__objects_1)
liburals_cli_a_OBJECTS = $(am_liburals_cli_a_OBJECTS)
liburals_common_a_AR = $(AR) $(ARFLAGS)
liburals_common_a_LIBADD =
am__liburals_common_a_SOURCES_DIST = activemasternode.cpp base58.cpp \
	allocators.cpp chainparams.cpp core.cpp darksend.cpp \
	darksend-relay.cpp masternode.cpp masternode-pos.cpp \
	masternodeman.cpp masternodeconfig.cpp instantx.cpp \
	hash/hash.cpp key.cpp netbase.cpp protocol.cpp rpcprotocol.cpp \
	script.cpp sync.cpp util.cpp version.cpp hash/aes_helper.c \
	hash/luffa.c hash/groestl.c hash/jh.c hash/echo.c \
	hash/shavite.c hash/keccak.c hash/skein.c hash/fugue.c \
	hash/hamsi.c hash/haval.c hash/sha2.c hash/shabal.c \
	hash/whirlpool.c hash/sph_sha2big.c spork.cpp hash/bmw.c \
	hash/simd.c hash/cubehash.c hash/blake.c activemasternode.h \
	addrman.h alert.h allocators.h base58.h bignum.h bloom.h \
	chainparams.h checkpoints.h checkqueue.h clientversion.h \
	coincontrol.h coins.h compat.h core.h crypter.h darksend.h \
	darksend-relay.h db.h hash/urals11hash.h hash/xevan.h init.h \
	instantx.h key.h keepass.h keystore.h leveldbwrapper.h \
	limitedmap.h main.h masternode.h masternode-pos.h \
	masternodeman.h masternodeconfig.h miner.h mruset.h netbase.h \
	net.h noui.h protocol.h rpcclient.h rpcprotocol.h rpcserver.h \
	script.h serialize.h hash/sph_blake.h hash/sph_bmw.h \
	hash/sph_cubehash.h hash/sph_echo.h hash/sph_groestl.h \
	hash/sph_jh.h hash/sph_keccak.h hash/sph_luffa.h \
	hash/sph_shavite.h hash/sph_simd.h hash/sph_skein.h \
	hash/sph_types.h hash/sph_fugue.h hash/sph_hamsi.h \
	hash/sph_haval.h hash/sph_shabal.h hash/sph_sha2.h \
	hash/sph_whirlpool.h hash/spork.h sync.h threadsafety.h \
	tinyformat.h txdb.h txmempool.h ui_interface.h uint256.h \
	util.h version.h walletdb.h wallet.h compat/glibc_compat.cpp \
	compat/glibcxx_compat.cpp
am__dirstamp = $(am__leading_dot)dirstamp
#am__objects_2 = compat/glibc_compat.$(OBJEXT) \
#	compat/glibcxx_compat.$(OBJEXT)
am_liburals_common_a_OBJECTS = activemasternode.$(OBJEXT) \
	base58.$(OBJEXT) allocators.$(OBJEXT) chainparams.$(OBJEXT) \
	core.$(OBJEXT) darksend.$(OBJEXT) darksend-relay.$(OBJEXT) \
	masternode.$(OBJEXT) masternode-pos.$(OBJEXT) \
	masternodeman.$(OBJEXT) masternodeconfig.$(OBJEXT) \
	instantx.$(OBJEXT) hash/hash.$(OBJEXT) key.$(OBJEXT) \
	netbase.$(OBJEXT) protocol.$(OBJEXT) rpcprotocol.$(OBJEXT) \
	script.$(OBJEXT) sync.$(OBJEXT) util.$(OBJEXT) \
	version.$(OBJEXT) hash/aes_helper.$(OBJEXT) \
	hash/luffa.$(OBJEXT) hash/groestl.$(OBJEXT) hash/jh.$(OBJEXT) \
	hash/echo.$(OBJEXT) hash/shavite.$(OBJEXT) \
	hash/keccak.$(OBJEXT) hash/skein.$(OBJEXT) \
	hash/fugue.$(OBJEXT) hash/hamsi.$(OBJEXT) hash/haval.$(OBJEXT) \
	hash/sha2.$(OBJEXT) hash/shabal.$(OBJEXT) \
	hash/whirlpool.$(OBJEXT) hash/sph_sha2big.$(OBJEXT) \
	spork.$(OBJEXT) hash/bmw.$(OBJEXT) hash/simd.$(OBJEXT) \
	hash/cubehash.$(OBJEXT) hash/blake.$(OBJEXT) $(am__objects_1) \
	$(am__objects_2)
nodist_liburals_common_a_OBJECTS =
liburals_common_a_OBJECTS = $(am_liburals_common_a_OBJECTS) \
	$(nodist_liburals_common_a_OBJECTS)
liburals_server_a_AR = $(AR) $(ARFLAGS)
liburals_server_a_LIBADD =
am_liburals_server_a_OBJECTS = activemasternode.$(OBJEXT) \
	addrman.$(OBJEXT) alert.$(OBJEXT) bloom.$(OBJEXT) \
	checkpoints.$(OBJEXT) coins.$(OBJEXT) init.$(OBJEXT) \
	keystore.$(OBJEXT) leveldbwrapper.$(OBJEXT) main.$(OBJEXT) \
	miner.$(OBJEXT) net.$(OBJEXT) noui.$(OBJEXT) \
	rpcblockchain.$(OBJEXT) rpcdarksend.$(OBJEXT) \
	rpcmining.$(OBJEXT) rpcmisc.$(OBJEXT) rpcnet.$(OBJEXT) \
	rpcrawtransaction.$(OBJEXT) rpcserver.$(OBJEXT) txdb.$(OBJEXT) \
	txmempool.$(OBJEXT) $(am__objects_1) $(am__objects_1)
liburals_server_a_OBJECTS = $(am_liburals_server_a_OBJECTS)
liburals_wallet_a_AR = $(AR) $(ARFLAGS)
liburals_wallet_a_LIBADD =
am_liburals_wallet_a_OBJECTS = activemasternode.$(OBJEXT) db.$(OBJEXT) \
	crypter.$(OBJEXT) rpcdump.$(OBJEXT) rpcwallet.$(OBJEXT) \
	wallet.$(OBJEXT) walletdb.$(OBJEXT) keepass.$(OBJEXT) \
	$(am__objects_1)
liburals_wallet_a_OBJECTS = $(am_liburals_wallet_a_OBJECTS)
am__EXEEXT_1 = uralsd$(EXEEXT)
am__EXEEXT_2 = urals-cli$(EXEEXT)
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am__urals_cli_SOURCES_DIST = urals-cli.cpp urals-cli-res.rc
#am__objects_3 = urals-cli-res.$(OBJEXT)
am_urals_cli_OBJECTS = urals-cli.$(OBJEXT) $(am__objects_3)
urals_cli_OBJECTS = $(am_urals_cli_OBJECTS)
am__DEPENDENCIES_1 =
urals_cli_DEPENDENCIES = liburals_cli.a liburals_common.a \
	$(am__DEPENDENCIES_1)
am__uralsd_SOURCES_DIST = uralsd.cpp uralsd-res.rc
#am__objects_4 = uralsd-res.$(OBJEXT)
am_uralsd_OBJECTS = uralsd.$(OBJEXT) $(am__objects_4)
uralsd_OBJECTS = $(am_uralsd_OBJECTS)
am__DEPENDENCIES_2 = $(am__append_2)
am__DEPENDENCIES_3 = $(am__append_3)
uralsd_DEPENDENCIES = liburals_server.a liburals_cli.a \
	liburals_common.a $(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3) \
	$(am__append_8) $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.
depcomp = $(SHELL) $(top_srcdir)/src/build-aux/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(liburals_cli_a_SOURCES) $(liburals_common_a_SOURCES) \
	$(nodist_liburals_common_a_SOURCES) \
	$(liburals_server_a_SOURCES) $(liburals_wallet_a_SOURCES) \
	$(urals_cli_SOURCES) $(uralsd_SOURCES)
DIST_SOURCES = $(liburals_cli_a_SOURCES) \
	$(am__liburals_common_a_SOURCES_DIST) \
	$(liburals_server_a_SOURCES) $(liburals_wallet_a_SOURCES) \
	$(am__urals_cli_SOURCES_DIST) $(am__uralsd_SOURCES_DIST)
RECURSIVE_TARGETS = all-recursive check-recursive cscopelist-recursive \
	ctags-recursive dvi-recursive html-recursive info-recursive \
	install-data-recursive install-dvi-recursive \
	install-exec-recursive install-html-recursive \
	install-info-recursive install-pdf-recursive \
	install-ps-recursive install-recursive installcheck-recursive \
	installdirs-recursive pdf-recursive ps-recursive \
	tags-recursive uninstall-recursive
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive	\
  distclean-recursive maintainer-clean-recursive
am__recursive_targets = \
  $(RECURSIVE_TARGETS) \
  $(RECURSIVE_CLEAN_TARGETS) \
  $(am__extra_recursive_targets)
AM_RECURSIVE_TARGETS = $(am__recursive_targets:-recursive=) TAGS CTAGS \
	distdir
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)urals-config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.include \
	$(srcdir)/urals-config.h.in \
	$(top_srcdir)/src/build-aux/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
am__relativize = \
  dir0=`pwd`; \
  sed_first='s,^\([^/]*\)/.*$$,\1,'; \
  sed_rest='s,^[^/]*/*,,'; \
  sed_last='s,^.*/\([^/]*\)$$,\1,'; \
  sed_butlast='s,/*[^/]*$$,,'; \
  while test -n "$$dir1"; do \
    first=`echo "$$dir1" | sed -e "$$sed_first"`; \
    if test "$$first" != "."; then \
      if test "$$first" = ".."; then \
        dir2=`echo "$$dir0" | sed -e "$$sed_last"`/"$$dir2"; \
        dir0=`echo "$$dir0" | sed -e "$$sed_butlast"`; \
      else \
        first2=`echo "$$dir2" | sed -e "$$sed_first"`; \
        if test "$$first2" = "$$first"; then \
          dir2=`echo "$$dir2" | sed -e "$$sed_rest"`; \
        else \
          dir2="../$$dir2"; \
        fi; \
        dir0="$$dir0"/"$$first"; \
      fi; \
    fi; \
    dir1=`echo "$$dir1" | sed -e "$$sed_rest"`; \
  done; \
  reldir="$$dir2"
ACLOCAL = ${SHELL} /home/wizard/UralsCoin/src/build-aux/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = /usr/bin/ar
AUTOCONF = ${SHELL} /home/wizard/UralsCoin/src/build-aux/missing autoconf
AUTOHEADER = ${SHELL} /home/wizard/UralsCoin/src/build-aux/missing autoheader
AUTOMAKE = ${SHELL} /home/wizard/UralsCoin/src/build-aux/missing automake-1.15
AWK = mawk
BDB_CPPFLAGS = 
BDB_LIBS = -ldb_cxx-4.8
BOOST_CHRONO_LIB = -lboost_chrono 
BOOST_CPPFLAGS = -pthread -I/usr/include
BOOST_FILESYSTEM_LIB = -lboost_filesystem
BOOST_LDFLAGS = -L/usr/lib/x86_64-linux-gnu
BOOST_LIBS = -L/usr/lib/x86_64-linux-gnu -lboost_system -lboost_filesystem -lboost_program_options -lboost_thread -lboost_chrono 
BOOST_PROGRAM_OPTIONS_LIB = -lboost_program_options
BOOST_SYSTEM_LIB = -lboost_system
BOOST_THREAD_LIB = -lboost_thread
BOOST_UNIT_TEST_FRAMEWORK_LIB = 
BREW = 
BUILD_QT = 
BUILD_TEST = 
BUILD_TEST_QT = 
CC = gcc
CCACHE = 
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CLIENT_VERSION_BUILD = 6
CLIENT_VERSION_IS_RELEASE = true
CLIENT_VERSION_MAJOR = 1
CLIENT_VERSION_MINOR = 0
CLIENT_VERSION_REVISION = 0
COMPARISON_TOOL_REORG_TESTS = 0
COPYRIGHT_YEAR = 2018
CPP = gcc -E
CPPFLAGS =  -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS  -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2
CRYPTO_CFLAGS = 
CRYPTO_LIBS = -lcrypto
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter  -Wstack-protector -fstack-protector-all
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GCOV = /usr/bin/gcov
GENHTML = 
GENISOIMAGE = 
GIT = /usr/bin/git
GREP = /bin/grep
HEXDUMP = /usr/bin/hexdump
INCLUDES =  -pthread  
INSTALL = /usr/bin/install -c
INSTALLNAMETOOL = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JAVA = /usr/bin/java
JAVA_COMPARISON_TOOL = 
LCOV = 
LDFLAGS =   -Wl,-z,relro -Wl,-z,now
LEVELDB_CPPFLAGS =  $(am__append_1)
LEVELDB_TARGET_FLAGS = 
LIBLEVELDB =  $(am__append_2)
LIBMEMENV =  $(am__append_3)
LIBOBJS = 
LIBS = -lminiupnpc -lminiupnpc -lminiupnpc -lminiupnpc  -lssl -lcrypto
LN_S = ln -s
LRELEASE = 
LTLIBOBJS = 
LUPDATE = 
MAINT = 
MAKEINFO = ${SHELL} /home/wizard/UralsCoin/src/build-aux/missing makeinfo
MAKENSIS = 
MKDIR_P = /bin/mkdir -p
MOC = 
MOC_DEFS = -DHAVE_CONFIG_H -I$(top_srcdir)/src
OBJC = gcc
OBJCDEPMODE = depmode=gcc3
OBJCFLAGS = 
OBJCXX = g++
OBJCXXDEPMODE = depmode=gcc3
OBJCXXFLAGS = -g -O2 -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter  -Wstack-protector -fstack-protector-all
OBJEXT = o
OTOOL = 
PACKAGE = urals
PACKAGE_BUGREPORT = info@urals.info
PACKAGE_NAME = Urals Core
PACKAGE_STRING = Urals Core 1.0.0
PACKAGE_TARNAME = urals
PACKAGE_URL = 
PACKAGE_VERSION = 1.0.0
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PORT = 
PROTOBUF_CFLAGS = 
PROTOBUF_LIBS = 
PROTOC = 
PTHREAD_CC = gcc
PTHREAD_CFLAGS = -pthread
PTHREAD_LIBS = 
QR_CFLAGS = 
QR_LIBS = 
QT_CFLAGS = 
QT_DBUS_CFLAGS = 
QT_DBUS_INCLUDES = 
QT_DBUS_LIBS = 
QT_INCLUDES = 
QT_LDFLAGS = 
QT_LIBS = 
QT_SELECT = qt
QT_TEST_CFLAGS = 
QT_TEST_INCLUDES = 
QT_TEST_LIBS = 
RANLIB = /usr/bin/ranlib
RCC = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SSL_CFLAGS = 
SSL_LIBS = -lssl
STRIP = /usr/bin/strip
TESTDEFS = 
UIC = 
USE_QRCODE = 
USE_UPNP = 
VERSION = 1.0.0
WINDOWS_BITS = 
WINDRES = 
XGETTEXT = /usr/bin/xgettext
abs_builddir = /home/wizard/UralsCoin/src
abs_srcdir = /home/wizard/UralsCoin/src
abs_top_builddir = /home/wizard/UralsCoin
abs_top_srcdir = /home/wizard/UralsCoin
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_OBJC = gcc
ac_ct_OBJCXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
ax_pthread_config = 
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/wizard/UralsCoin/src/build-aux/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
AM_CPPFLAGS = $(INCLUDES) -I$(top_builddir)/src/obj $(BDB_CPPFLAGS) \
	$(BOOST_CPPFLAGS) $(BOOST_INCLUDES) $(LEVELDB_CPPFLAGS) \
	-I$(builddir) $(BDB_CPPFLAGS)
AM_LDFLAGS = $(PTHREAD_CFLAGS)
LIBBITCOIN_SERVER = $(top_builddir)/src/liburals_server.a
LIBBITCOIN_WALLET = $(top_builddir)/src/liburals_wallet.a
LIBBITCOIN_COMMON = $(top_builddir)/src/liburals_common.a
LIBBITCOIN_CLI = $(top_builddir)/src/liburals_cli.a
LIBBITCOINQT = $(top_builddir)/src/qt/liburalsqt.a
noinst_LIBRARIES = liburals_server.a liburals_common.a liburals_cli.a \
	$(am__append_4)
SUBDIRS = . $(BUILD_QT) $(BUILD_TEST)
DIST_SUBDIRS = . qt test
# urals core #
BITCOIN_CORE_H = \
  activemasternode.h \
  addrman.h \
  alert.h \
  allocators.h \
  base58.h bignum.h \
  bloom.h \
  chainparams.h \
  checkpoints.h \
  checkqueue.h \
  clientversion.h \
  coincontrol.h \
  coins.h \
  compat.h \
  core.h \
  crypter.h \
  darksend.h \
  darksend-relay.h \
  db.h \
  hash/urals11hash.h \
  hash/xevan.h \
  init.h \
  instantx.h \
  key.h \
  keepass.h \
  keystore.h \
  leveldbwrapper.h \
  limitedmap.h \
  main.h \
  masternode.h \
  masternode-pos.h \
  masternodeman.h \
  masternodeconfig.h \
  miner.h \
  mruset.h \
  netbase.h \
  net.h \
  noui.h \
  protocol.h \
  rpcclient.h \
  rpcprotocol.h \
  rpcserver.h \
  script.h \
  serialize.h \
  hash/sph_blake.h \
  hash/sph_bmw.h \
  hash/sph_cubehash.h \
  hash/sph_echo.h \
  hash/sph_groestl.h \
  hash/sph_jh.h \
  hash/sph_keccak.h \
  hash/sph_luffa.h \
  hash/sph_shavite.h \
  hash/sph_simd.h \
  hash/sph_skein.h \
  hash/sph_types.h \
  hash/sph_fugue.h \
  hash/sph_hamsi.h \
  hash/sph_haval.h \
  hash/sph_shabal.h \
  hash/sph_sha2.h \
  hash/sph_whirlpool.h \
  hash/spork.h \
  sync.h \
  threadsafety.h \
  tinyformat.h \
  txdb.h \
  txmempool.h \
  ui_interface.h \
  uint256.h \
  util.h \
  version.h \
  walletdb.h \
  wallet.h

JSON_H = \
  json/json_spirit.h \
  json/json_spirit_error_position.h \
  json/json_spirit_reader.h \
  json/json_spirit_reader_template.h \
  json/json_spirit_stream_reader.h \
  json/json_spirit_utils.h \
  json/json_spirit_value.h \
  json/json_spirit_writer.h \
  json/json_spirit_writer_template.h

liburals_server_a_SOURCES = \
  activemasternode.cpp \
  addrman.cpp \
  alert.cpp \
  bloom.cpp \
  checkpoints.cpp \
  coins.cpp \
  init.cpp \
  keystore.cpp \
  leveldbwrapper.cpp \
  main.cpp \
  miner.cpp \
  net.cpp \
  noui.cpp \
  rpcblockchain.cpp \
  rpcdarksend.cpp \
  rpcmining.cpp \
  rpcmisc.cpp \
  rpcnet.cpp \
  rpcrawtransaction.cpp \
  rpcserver.cpp \
  txdb.cpp \
  txmempool.cpp \
  $(JSON_H) \
  $(BITCOIN_CORE_H)

liburals_wallet_a_SOURCES = \
  activemasternode.cpp \
  db.cpp \
  crypter.cpp \
  rpcdump.cpp \
  rpcwallet.cpp \
  wallet.cpp \
  walletdb.cpp \
  keepass.cpp \
  $(BITCOIN_CORE_H)

liburals_common_a_SOURCES = activemasternode.cpp base58.cpp \
	allocators.cpp chainparams.cpp core.cpp darksend.cpp \
	darksend-relay.cpp masternode.cpp masternode-pos.cpp \
	masternodeman.cpp masternodeconfig.cpp instantx.cpp \
	hash/hash.cpp key.cpp netbase.cpp protocol.cpp rpcprotocol.cpp \
	script.cpp sync.cpp util.cpp version.cpp hash/aes_helper.c \
	hash/luffa.c hash/groestl.c hash/jh.c hash/echo.c \
	hash/shavite.c hash/keccak.c hash/skein.c hash/fugue.c \
	hash/hamsi.c hash/haval.c hash/sha2.c hash/shabal.c \
	hash/whirlpool.c hash/sph_sha2big.c spork.cpp hash/bmw.c \
	hash/simd.c hash/cubehash.c hash/blake.c $(BITCOIN_CORE_H) \
	$(am__append_7)
liburals_cli_a_SOURCES = \
  rpcclient.cpp \
  $(BITCOIN_CORE_H)

nodist_liburals_common_a_SOURCES = $(top_srcdir)/src/obj/build.h
#

# uralsd binary #
uralsd_LDADD = liburals_server.a liburals_cli.a liburals_common.a \
	$(LIBLEVELDB) $(LIBMEMENV) $(am__append_8) $(BOOST_LIBS) \
	$(BDB_LIBS)
uralsd_SOURCES = uralsd.cpp $(am__append_9)

# urals-cli binary #
urals_cli_LDADD = \
  liburals_cli.a \
  liburals_common.a \
  $(BOOST_LIBS)

urals_cli_SOURCES = urals-cli.cpp $(am__append_10)
CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno
DISTCLEANFILES = obj/build.h
EXTRA_DIST = leveldb Makefile.include
all: urals-config.h
	$(MAKE) $(AM_MAKEFLAGS) all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .mm .o .obj .rc
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(srcdir)/Makefile.include $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(srcdir)/Makefile.include $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

urals-config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/urals-config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/urals-config.h
$(srcdir)/urals-config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f urals-config.h stamp-h1

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)

liburals_cli.a: $(liburals_cli_a_OBJECTS) $(liburals_cli_a_DEPENDENCIES) $(EXTRA_liburals_cli_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f liburals_cli.a
	$(AM_V_AR)$(liburals_cli_a_AR) liburals_cli.a $(liburals_cli_a_OBJECTS) $(liburals_cli_a_LIBADD)
	$(AM_V_at)$(RANLIB) liburals_cli.a
hash/$(am__dirstamp):
	@$(MKDIR_P) hash
	@: > hash/$(am__dirstamp)
hash/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) hash/$(DEPDIR)
	@: > hash/$(DEPDIR)/$(am__dirstamp)
hash/hash.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/aes_helper.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/luffa.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/groestl.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/jh.$(OBJEXT): hash/$(am__dirstamp) hash/$(DEPDIR)/$(am__dirstamp)
hash/echo.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/shavite.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/keccak.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/skein.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/fugue.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/hamsi.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/haval.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/sha2.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/shabal.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/whirlpool.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/sph_sha2big.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/bmw.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/simd.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/cubehash.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
hash/blake.$(OBJEXT): hash/$(am__dirstamp) \
	hash/$(DEPDIR)/$(am__dirstamp)
compat/$(am__dirstamp):
	@$(MKDIR_P) compat
	@: > compat/$(am__dirstamp)
compat/$(DEPDIR)/$(am__dirstamp):
	@$(MKDIR_P) compat/$(DEPDIR)
	@: > compat/$(DEPDIR)/$(am__dirstamp)
compat/glibc_compat.$(OBJEXT): compat/$(am__dirstamp) \
	compat/$(DEPDIR)/$(am__dirstamp)
compat/glibcxx_compat.$(OBJEXT): compat/$(am__dirstamp) \
	compat/$(DEPDIR)/$(am__dirstamp)

liburals_common.a: $(liburals_common_a_OBJECTS) $(liburals_common_a_DEPENDENCIES) $(EXTRA_liburals_common_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f liburals_common.a
	$(AM_V_AR)$(liburals_common_a_AR) liburals_common.a $(liburals_common_a_OBJECTS) $(liburals_common_a_LIBADD)
	$(AM_V_at)$(RANLIB) liburals_common.a

liburals_server.a: $(liburals_server_a_OBJECTS) $(liburals_server_a_DEPENDENCIES) $(EXTRA_liburals_server_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f liburals_server.a
	$(AM_V_AR)$(liburals_server_a_AR) liburals_server.a $(liburals_server_a_OBJECTS) $(liburals_server_a_LIBADD)
	$(AM_V_at)$(RANLIB) liburals_server.a

liburals_wallet.a: $(liburals_wallet_a_OBJECTS) $(liburals_wallet_a_DEPENDENCIES) $(EXTRA_liburals_wallet_a_DEPENDENCIES) 
	$(AM_V_at)-rm -f liburals_wallet.a
	$(AM_V_AR)$(liburals_wallet_a_AR) liburals_wallet.a $(liburals_wallet_a_OBJECTS) $(liburals_wallet_a_LIBADD)
	$(AM_V_at)$(RANLIB) liburals_wallet.a
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

urals-cli$(EXEEXT): $(urals_cli_OBJECTS) $(urals_cli_DEPENDENCIES) $(EXTRA_urals_cli_DEPENDENCIES) 
	@rm -f urals-cli$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(urals_cli_OBJECTS) $(urals_cli_LDADD) $(LIBS)

uralsd$(EXEEXT): $(uralsd_OBJECTS) $(uralsd_DEPENDENCIES) $(EXTRA_uralsd_DEPENDENCIES) 
	@rm -f uralsd$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(uralsd_OBJECTS) $(uralsd_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)
	-rm -f compat/*.$(OBJEXT)
	-rm -f hash/*.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/activemasternode.Po
include ./$(DEPDIR)/addrman.Po
include ./$(DEPDIR)/alert.Po
include ./$(DEPDIR)/allocators.Po
include ./$(DEPDIR)/base58.Po
include ./$(DEPDIR)/bloom.Po
include ./$(DEPDIR)/chainparams.Po
include ./$(DEPDIR)/checkpoints.Po
include ./$(DEPDIR)/coins.Po
include ./$(DEPDIR)/core.Po
include ./$(DEPDIR)/crypter.Po
include ./$(DEPDIR)/darksend-relay.Po
include ./$(DEPDIR)/darksend.Po
include ./$(DEPDIR)/db.Po
include ./$(DEPDIR)/init.Po
include ./$(DEPDIR)/instantx.Po
include ./$(DEPDIR)/keepass.Po
include ./$(DEPDIR)/key.Po
include ./$(DEPDIR)/keystore.Po
include ./$(DEPDIR)/leveldbwrapper.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/masternode-pos.Po
include ./$(DEPDIR)/masternode.Po
include ./$(DEPDIR)/masternodeconfig.Po
include ./$(DEPDIR)/masternodeman.Po
include ./$(DEPDIR)/miner.Po
include ./$(DEPDIR)/net.Po
include ./$(DEPDIR)/netbase.Po
include ./$(DEPDIR)/noui.Po
include ./$(DEPDIR)/protocol.Po
include ./$(DEPDIR)/rpcblockchain.Po
include ./$(DEPDIR)/rpcclient.Po
include ./$(DEPDIR)/rpcdarksend.Po
include ./$(DEPDIR)/rpcdump.Po
include ./$(DEPDIR)/rpcmining.Po
include ./$(DEPDIR)/rpcmisc.Po
include ./$(DEPDIR)/rpcnet.Po
include ./$(DEPDIR)/rpcprotocol.Po
include ./$(DEPDIR)/rpcrawtransaction.Po
include ./$(DEPDIR)/rpcserver.Po
include ./$(DEPDIR)/rpcwallet.Po
include ./$(DEPDIR)/script.Po
include ./$(DEPDIR)/spork.Po
include ./$(DEPDIR)/sync.Po
include ./$(DEPDIR)/txdb.Po
include ./$(DEPDIR)/txmempool.Po
include ./$(DEPDIR)/urals-cli.Po
include ./$(DEPDIR)/uralsd.Po
include ./$(DEPDIR)/util.Po
include ./$(DEPDIR)/version.Po
include ./$(DEPDIR)/wallet.Po
include ./$(DEPDIR)/walletdb.Po
include compat/$(DEPDIR)/glibc_compat.Po
include compat/$(DEPDIR)/glibcxx_compat.Po
include hash/$(DEPDIR)/aes_helper.Po
include hash/$(DEPDIR)/blake.Po
include hash/$(DEPDIR)/bmw.Po
include hash/$(DEPDIR)/cubehash.Po
include hash/$(DEPDIR)/echo.Po
include hash/$(DEPDIR)/fugue.Po
include hash/$(DEPDIR)/groestl.Po
include hash/$(DEPDIR)/hamsi.Po
include hash/$(DEPDIR)/hash.Po
include hash/$(DEPDIR)/haval.Po
include hash/$(DEPDIR)/jh.Po
include hash/$(DEPDIR)/keccak.Po
include hash/$(DEPDIR)/luffa.Po
include hash/$(DEPDIR)/sha2.Po
include hash/$(DEPDIR)/shabal.Po
include hash/$(DEPDIR)/shavite.Po
include hash/$(DEPDIR)/simd.Po
include hash/$(DEPDIR)/skein.Po
include hash/$(DEPDIR)/sph_sha2big.Po
include hash/$(DEPDIR)/whirlpool.Po

.c.o:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ $<

.c.obj:
	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

# This directory's subdirectories are mostly independent; you can cd
# into them and run 'make' without going through this Makefile.
# To change the values of 'make' variables: instead of editing Makefiles,
# (1) if the variable is set in 'config.status', edit 'config.status'
#     (which will cause the Makefiles to be regenerated when you run 'make');
# (2) otherwise, pass the desired values on the 'make' command line.
$(am__recursive_targets):
	@fail=; \
	if $(am__make_keepgoing); then \
	  failcom='fail=yes'; \
	else \
	  failcom='exit 1'; \
	fi; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  ($(am__cd) $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-recursive
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      set "$$@" "$$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-recursive

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-recursive

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	@list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    $(am__make_dryrun) \
	      || test -d "$(distdir)/$$subdir" \
	      || $(MKDIR_P) "$(distdir)/$$subdir" \
	      || exit 1; \
	    dir1=$$subdir; dir2="$(distdir)/$$subdir"; \
	    $(am__relativize); \
	    new_distdir=$$reldir; \
	    dir1=$$subdir; dir2="$(top_distdir)"; \
	    $(am__relativize); \
	    new_top_distdir=$$reldir; \
	    echo " (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir="$$new_top_distdir" distdir="$$new_distdir" \\"; \
	    echo "     am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir)"; \
	    ($(am__cd) $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$new_top_distdir" \
	        distdir="$$new_distdir" \
		am__remove_distdir=: \
		am__skip_length_check=: \
		am__skip_mode_fix=: \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(LIBRARIES) $(PROGRAMS) urals-config.h
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-rm -f compat/$(DEPDIR)/$(am__dirstamp)
	-rm -f compat/$(am__dirstamp)
	-rm -f hash/$(DEPDIR)/$(am__dirstamp)
	-rm -f hash/$(am__dirstamp)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-binPROGRAMS clean-generic clean-local \
	clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR) compat/$(DEPDIR) hash/$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

html-am:

info: info-recursive

info-am:

install-data-am:

install-dvi: install-dvi-recursive

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-recursive

install-html-am:

install-info: install-info-recursive

install-info-am:

install-man:

install-pdf: install-pdf-recursive

install-pdf-am:

install-ps: install-ps-recursive

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR) compat/$(DEPDIR) hash/$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: $(am__recursive_targets) all install-am install-strip

.PHONY: $(am__recursive_targets) CTAGS GTAGS TAGS all all-am check \
	check-am clean clean-binPROGRAMS clean-generic clean-local \
	clean-noinstLIBRARIES cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-hdr \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-binPROGRAMS

.PRECIOUS: Makefile


$(LIBBITCOIN):
	$(MAKE) -C $(top_builddir)/src $(@F)

$(LIBLEVELDB) $(LIBMEMENV):
	$(MAKE) -C $(top_builddir)/src leveldb/$(@F)

$(LIBBITCOINQT):
	$(MAKE) -C $(top_builddir)/src/qt $(@F)

.mm.o:
	$(OBJC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	  $(CPPFLAGS) $(AM_CXXFLAGS) $(QT_INCLUDES) $(CXXFLAGS)  -c -o $@ $<

.rc.o:
	@test -f $(WINDRES) && $(WINDRES) -i $< -o $@ || \
          echo error: could not build $@

ui_%.h: %.ui
	@test -d $(abs_builddir)/$(@D) || $(MKDIR_P) $(abs_builddir)/$(@D)
	@test -f $(UIC) && QT_SELECT=$(QT_SELECT) $(UIC) -o $(abs_builddir)/$@ $(abs_srcdir)/$< || echo error: could not build $(abs_builddir)/$@
	$(SED) -e '/^\*\*.*Created:/d' $(abs_builddir)/$@ > $(abs_builddir)/$@.n && mv $(abs_builddir)/$@{.n,}
	$(SED) -e '/^\*\*.*by:/d' $(abs_builddir)/$@ > $(abs_builddir)/$@.n && mv $(abs_builddir)/$@{.n,}

%.moc: %.cpp
	QT_SELECT=$(QT_SELECT) $(MOC) $(QT_INCLUDES) $(MOC_DEFS) -o $@ $<
	$(SED) -e '/^\*\*.*Created:/d' $@ > $@.n && mv $@{.n,}
	$(SED) -e '/^\*\*.*by:/d' $@ > $@.n && mv $@{.n,}

moc_%.cpp: %.h
	QT_SELECT=$(QT_SELECT) $(MOC) $(QT_INCLUDES) $(MOC_DEFS) -o $@ $<
	$(SED) -e '/^\*\*.*Created:/d' $@ > $@.n && mv $@{.n,}
	$(SED) -e '/^\*\*.*by:/d' $@ > $@.n && mv $@{.n,}

%.qm: %.ts
	@test -d $(abs_builddir)/$(@D) || $(MKDIR_P) $(abs_builddir)/$(@D)
	@test -f $(LRELEASE) && QT_SELECT=$(QT_SELECT) $(LRELEASE) $(abs_srcdir)/$< -qm $(abs_builddir)/$@ || \
	 echo error: could not build $(abs_builddir)/$@

%.pb.cc %.pb.h: %.proto
	test -f $(PROTOC) && $(PROTOC) --cpp_out=$(@D) --proto_path=$(abspath $(<D) $<)  || \
	  echo error: could not build $@

%.json.h: %.json
	@$(MKDIR_P) $(@D)
	@echo "namespace json_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"

%.raw.h: %.raw
	@$(MKDIR_P) $(@D)
	@echo "namespace alert_tests{" > $@
	@echo "static unsigned const char $(*F)[] = {" >> $@
	@$(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' >> $@
	@echo "};};" >> $@
	@echo "Generated $@"
.PHONY: FORCE

obj/build.h: FORCE
	@$(MKDIR_P) $(abs_top_builddir)/src/obj
	@$(top_srcdir)/share/genbuild.sh $(abs_top_builddir)/src/obj/build.h \
	  $(abs_top_srcdir)
version.o: obj/build.h

# NOTE: This dependency is not strictly necessary, but without it make may try to build both in parallel, which breaks the LevelDB build system in a race
leveldb/libleveldb.a: leveldb/libmemenv.a

leveldb/%.a:
	@echo "Building LevelDB ..." && $(MAKE) -C $(@D) $(@F) CXX="$(CXX)" \
	  CC="$(CC)" PLATFORM=$(TARGET_OS) AR="$(AR)" $(LEVELDB_TARGET_FLAGS) \
	  OPT="$(CXXFLAGS) $(CPPFLAGS)"

qt/uralsstrings.cpp: $(liburals_server_a_SOURCES) $(liburals_common_a_SOURCES) $(liburals_cli_a_SOURCES)
	@test -n $(XGETTEXT) || echo "xgettext is required for updating translations"
	@cd $(top_srcdir); XGETTEXT=$(XGETTEXT) share/qt/extract_strings_qt.py

clean-local:
	-$(MAKE) -C leveldb clean
	rm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
